#!/bin/bash

_version="21.07"

error() { echo -e "$1" && exit; }

checkDependency() {
    while [ -n "$1" ]; do
        command -v "$1" > /dev/null ||
            error "This script required $1 to work, so install it first!"
        shift
    done
}

checkInternet() {
    wget --quiet --spider google.com &&
        return 0 || { echo "No internet!" && return 1;}
}

setup() {
    checkDependency feh wget jq ffmpeg sed
    _cacheDir="$HOME/.cache"
    _nowaterDir="$_cacheDir/nowater"
    _link="https://source.unsplash.com/random/"
    [ ! -d "$_nowaterDir" ] && mkdir -p "$_nowaterDir"
    _imgsDir="/usr/local/share/nowater/images"
    _defaultWp="$_imgsDir/default-wallpaper.png"
}

usage() {
    echo "Usage: nowater <option> <argument>
                    [-b | --bgtype <feh bg opt>]
                    [-c | --custom <feh opt>]
                    [-l | --link <source>]
                    [-s | --search <keyword>]
                    [-r | --subreddit <subreddit>]
                    [-t | --time <cycle time>]
                    [-f | --file <image file>]
                    [-d | --directory <image directory>]
                    [-V | --video <video file>]
                    [-F | --fps <frame per second>]
                    [-D | --duration <duration time>]
                    [-p | --position <start point of video>]
                    [-T | --time-of-day]
                    [-k | --kill]
                    [-v | --version]
                    [-h | --help]"
    exit
}

get_args() {
    PARSED_ARGUMENTS=$(getopt -a -n $0 -o b:c:l:s:r:t:f:d:V:F:D:p:Tkvh \
        -l bgtype:,custom:,link:,search:,subreddit:,time:,file:,directory:,\
        video:,fps:,duration:,position:,time-of-day,kill,version,help -- "$@")
    [ $? -ne 0 ] && usage

    while :; do
        case "$1" in
            -b | --bgtype)      _bgtype=${2} ; shift 2 ;;
            -c | --custom)      _custom=${2} ; shift 2 ;;
            -l | --link)        _custom_link=${2} ; shift 2 ;;
            -s | --search)      _search=${2} ; shift 2 ;;
            -r | --subreddit)   _sub=${2} ; shift 2 ;;
            -t | --time)        _time=${2} ; shift 2 ;;
            -f | --file)        _file=${2} ; shift 2 ;;
            -d | --directory)   _dir=${2} ; shift 2 ;;
            -V | --video)       _video=${2} ; shift 2 ;;
            -F | --fps)         _fps=${2} ; shift 2 ;;
            -D | --duration)    _duration=${2} ; shift 2 ;;
            -p | --position)    _position=${2} ; shift 2 ;;
            -T | --time-of-day) _isTimeOfDay="true" ; shift ;;
            -k | --kill)        killall "${0##*/}"; exit ;;
            -v | --version)     echo "nowater v$_version"
                                echo "Github: https://github.com/justanoobcoder/nowater"
                                exit ;;
            -h | --help)        usage ;;
            -- | '')            shift; break ;;
            *) echo "Unexpected option: $1 is not a valid option." ; usage ;;
        esac
    done
}

unsplash() {
    local _search="${_search// /_}"
    _link="${_link}1920x1080";
    [ -n "$_search" ] && _link="${_link}/?${_search}"
}

reddit() {
    checkInternet || return

    [ ! -f "$_nowaterDir/subreddits" ] && printf "wallpaper\nwallpapers" > "$_nowaterDir/subreddits"

    readarray _subreddits < "$_nowaterDir/subreddits"
    _sub="$(echo -e "${_subreddits[$(($RANDOM % ${#_subreddits[@]}))]}" | tr -d '[:space:]')"
    [ -n "$1" ] && _sub="$1"
    _url="https://www.reddit.com/r/$_sub/hot/.json?raw_json=1&t="
    _content=`wget -T 10 -q -O - $_url`
    _urls=$(echo -n "$_content" | jq -r '.data.children[]|select(.data.post_hint|test("image")?) | .data.preview.images[0].source.url')
    _arrURLS=($_urls)
    wait
    _size=${#_arrURLS[@]}
    if [ $_size -eq 0 ]; then
        [ -f /tmp/nowater.jpg ] && _feh+=("/tmp/nowater.jpg") || "${_feh[@]}" "$_defaultWp"
        error "The current subreddit is not valid."
    fi
    _target_url=${_arrURLS[$(($RANDOM % $_size))]}
    wget -T 10 --no-check-certificate -q -P down \
        -O "/tmp/nowater.jpg" $_target_url &>/dev/null
}

bgtypeFunc() {
    [ "$_bgtype" == "bg-center" ]    && _feh+=(--bg-center)
    [ "$_bgtype" == "bg-fill" ]      && _feh+=(--bg-fill)
    [ "$_bgtype" == "bg-max" ]       && _feh+=(--bg-max)
    [ "$_bgtype" == "bg-scale" ]     && _feh+=(--bg-scale)
    [ "$_bgtype" == "bg-tile" ]      && _feh+=(--bg-tile)
}

checkVideoInfo() {
    readarray _videoInfo < ~/.cache/nowater/video/video.info
    for ((i=0; i<${#_videoInfo[@]}; ++i)); do
        [ "${_videoInfo[$i]//[$'\n']}" != "$1" ] && return 1
        shift
    done
}

createVideoInfo() {
    rm -f "$_videoDir/video.info"
    while [ "$1" ]; do
        echo "$1" >> "$_videoDir/video.info"
        shift
    done
}

videoFunc() {
    _videoDir="$_nowaterDir/video"
    [ ! -d "$_videoDir" ] && mkdir -p "$_videoDir"

    [ -z "$_fps" ] && _fps=23
    [ -z "$_duration" ] && _duration=10
    [ -z "$_position" ] && _position="00:00"

    checkVideoInfo "$_video" "$_fps" "$_duration" "$_position" || {
        rm -rf "$_videoDir"/*
        ffmpeg -y -ss "$_position" -i "$_video" -t $_duration -q:v 4 -vf fps=$_fps \
            "$_videoDir/videoframe%06d.jpg" -loglevel error
    }
    _frameCount=$(ls "$_videoDir"/*.jpg | wc -l)

    createVideoInfo $_video $_fps $_duration $_position

    for ((i=1; ; ++i)); do
        [ $i -gt $_frameCount ] && i=1              
        "${_feh[@]}" $(ls -1 "$_videoDir/"*.jpg | sed -n "${i}p")
        sleep 0.01
    done
}

directoryFunc() {
    _feh+=(--randomize)
    while :; do
        "${_feh[@]}" "$_dir"
        [ -n "$_time" ] && sleep "$_time" || break
    done
}

onlineFunc() {
    while :; do
        if [ -f /tmp/login.nowall ]; then
            if [ "$_custom_link" == "reddit" ] || [ -n "$_sub" ]; then
                reddit "$_sub"
            else
                [ -n "$_custom_link" ] && _link="$_custom_link" || unsplash
                checkInternet && wget -q -O "/tmp/nowater.jpg" "$_link"
            fi
            /usr/bin/gsettings set org.gnome.desktop.background picture-uri file:////tmp/nowater.jpg
        else
            "${_feh[@]}" "$_defaultWp"
            touch /tmp/login.nowall
        fi
        [ -n "$_time" ] && sleep "$_time" || break
    done
}

timeOfDayFunc() {
    while :; do
        _hour=`date +%k`
        /usr/bin/gsettings set org.gnome.desktop.background picture-uri file:///"$_imgsDir/$((_hour/1)).png"
        sleep 10m
    done
}

main() {
    [ $EUID -eq 0 ] && error "Do not run this script as root."

    setup
    get_args "$@"

    _feh=(feh --no-fehbg)
    [ -n "$_bgtype" ] && bgtypeFunc || _feh+=(--bg-scale)
    [ -n "$_custom" ] && _feh+=($_custom)

    if [ -n "$_video" ]; then
        videoFunc &
    else {
        if [ -n "$_dir" ]; then
            directoryFunc &
        elif [ -n "$_file" ]; then
            "${_feh[@]}" "$_file"
        elif [ -n "$_isTimeOfDay" ]; then
            timeOfDayFunc &
        else
            onlineFunc &
        fi
    }
    fi

    return 0
}

main "$@"
